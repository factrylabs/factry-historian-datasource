image: golang:latest

variables:
  PROJECT_NAME: grafana-datasource
  REMOTES: "historian.factry.dev demo.factry.io"
  REMOTE_PATH: "/opt/factry/grafana-datasource"
  CLIENT_PORTAL_SERVER : "portal.factry.cloud"
  CLIENT_PORTAL_DOWNLOAD_PATH: "/opt/factry/portal.factry.cloud"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run on Merge Requests
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS # Don't run branch pipeline if there's an open MR for branch
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH =~ /^release-.*$/ || $CI_COMMIT_BRANCH == 'staging' || $CI_COMMIT_BRANCH == 'qa' # Run branch pipelines on main and release branches
    - if: $CI_COMMIT_TAG =~ /^v(\d\.){2}\d(-.*)?$/

stages:
  - test
  - build
  - deploy
  - publish

before_script:
  - eval $(ssh-agent -s)
  - echo "$DEPLOY_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - git config --global user.name "$GITLAB_USER_NAME"
  - git config --global user.email $GITLAB_USER_EMAIL
  - git remote set-url origin git@gitlab.com:$CI_PROJECT_PATH.git
  - git config --global url."ssh://git@gitlab.com".insteadOf "https://gitlab.com"

vet:
  stage: test
  script:
    - go vet -v ./pkg/...

build-frontend:
  stage: build
  image: node:18
  script:
    - npm install -g pnpm@^8.x
    - pnpm config set store-dir .pnpm-store
    - make set_frontend_version
    - pnpm install
    - npm run build
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/dist

build-backend:
  stage: build
  script:
    - git clone https://github.com/magefile/mage
    - cd mage && go run bootstrap.go && cd ..
    - mage -v
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/dist

deploy-branch:
  stage: deploy
  script:
    - for REMOTE in $REMOTES; do
        ssh gitlab@$REMOTE rm -rf $REMOTE_PATH/$CI_COMMIT_BRANCH;
        ssh gitlab@$REMOTE mkdir $REMOTE_PATH/$CI_COMMIT_BRANCH;
        scp -r dist/* gitlab@$REMOTE:$REMOTE_PATH/$CI_COMMIT_BRANCH;
      done
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/dist
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging' || $CI_COMMIT_BRANCH == 'qa' || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy-tag:
  stage: deploy
  script:
    - for REMOTE in $REMOTES; do
        ssh gitlab@$REMOTE rm -rf $REMOTE_PATH/$CI_COMMIT_TAG;
        ssh gitlab@$REMOTE mkdir $REMOTE_PATH/$CI_COMMIT_TAG;
        scp -r dist/* gitlab@$REMOTE:$REMOTE_PATH/$CI_COMMIT_TAG;
      done
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/dist
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(\d\.){2}\d(-.*)?$/

# Uploads the artifacts to the portal
.publish:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine:3.19
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(\d+\.){2}\d+(-.*)?/
      when: on_success
  needs:
    - job: build-backend
      optional: false
      artifacts: true
    - job: build-frontend
      optional: false
      artifacts: true
  variables:
    PORTAL_URL: ""
    PORTAL_PRODUCT_UPDATES_JWT_TOKEN: ""
  before_script:
    - apk add --no-cache curl zip
  script:
    - |
      product=factry-historian-datasource
      productType=factry-historian-datasource
      version=$(echo $CI_COMMIT_TAG | sed 's/^v//')
      os=any-zip
      arch=any
      signature="none"
      cp -r $CI_PROJECT_DIR/dist $CI_PROJECT_DIR/factry-historian-datasource
      zip $CI_PROJECT_DIR/factry-historian-datasource-$(version).zip $CI_PROJECT_DIR/factry-historian-datasource -r
      file=$(ls $CI_PROJECT_DIR/factry-historian-datasource-$(version).zip)
      path=$(realpath $file)
      echo "uploading $file ($version) to portal at ${PORTAL_URL}/api/product-updates"
      curl -X POST -H "Authorization: Bearer $PORTAL_PRODUCT_UPDATES_JWT_TOKEN" -F "productType=${productType}" -F "product=${product}" -F "os=${os}" -F "arch=${arch}" -F "version=${version}" -F "signature=${signature}" -F "binary=@${path}" --url "${PORTAL_URL}/api/product-updates"

"publish:prod":
  variables:
    PORTAL_URL: ${PORTAL_URL_PROD}
    PORTAL_PRODUCT_UPDATES_JWT_TOKEN: ${PORTAL_PRODUCT_UPDATES_JWT_TOKEN_PROD}
  extends: .publish

"publish:qa":
  allow_failure: true
  variables:
    PORTAL_URL: ${PORTAL_URL_QA}
    PORTAL_PRODUCT_UPDATES_JWT_TOKEN: ${PORTAL_PRODUCT_UPDATES_JWT_TOKEN_QA}
  extends: .publish

"publish:staging":
  allow_failure: true
  variables:
    PORTAL_URL: ${PORTAL_URL_STAGING}
    PORTAL_PRODUCT_UPDATES_JWT_TOKEN: ${PORTAL_PRODUCT_UPDATES_JWT_TOKEN_STAGING}
  extends: .publish
