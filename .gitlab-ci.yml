image: golang:latest

variables:
  PROJECT_NAME: grafana-datasource
  REMOTE: "historian.factry.dev"
  REMOTE_PATH: "/opt/factry/grafana-datasource"
  CLIENT_PORTAL_SERVER : "portal.factry.cloud"
  CLIENT_PORTAL_DOWNLOAD_PATH: "/opt/factry/portal.factry.cloud"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run on Merge Requests
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS # Don't run branch pipeline if there's an open MR for branch
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH =~ /^release-.*$/ # Run branch pipelines on main and release branches
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

stages:
  - test
  - build
  - deploy
  - release
  - publish

before_script:
  - eval $(ssh-agent -s)
  - echo "$DEPLOY_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - git config --global user.name "$GITLAB_USER_NAME"
  - git config --global user.email $GITLAB_USER_EMAIL
  - git remote set-url origin git@gitlab.com:$CI_PROJECT_PATH.git
  - git config --global url."ssh://git@gitlab.com".insteadOf "https://gitlab.com"

vet:
  stage: test
  script:
    - go vet -v ./pkg/...

build-frontend:
  stage: build
  image: node:18
  before_script:
    - npm install -g pnpm@latest
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install
    - npm run build
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/dist

build-backend:
  stage: build
  script:
    - git clone https://github.com/magefile/mage
    - cd mage && go run bootstrap.go && cd ..
    - mage -v
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/dist

deploy:
  stage: deploy
  script:
    - ssh gitlab@$REMOTE rm -rf $REMOTE_PATH/$CI_COMMIT_BRANCH
    - ssh gitlab@$REMOTE mkdir $REMOTE_PATH/$CI_COMMIT_BRANCH
    - scp -r dist/* gitlab@$REMOTE:$REMOTE_PATH/$CI_COMMIT_BRANCH
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/dist
  rules:
    - if: $CI_COMMIT_BRANCH == 'staging' || $CI_COMMIT_BRANCH == 'qa' || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release:
  stage: release
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /ci-bump/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - git tag -l | xargs git tag -d
    - git fetch --tags
    - make version_bump_patch message="[ci skip] Bumping patch version of $CI_PROJECT_NAME"
    - PACKAGE_VERSION=$(make version)
    - git checkout -B "release-$PACKAGE_VERSION"
    - git tag -f $PACKAGE_VERSION
    - "git push origin : $PACKAGE_VERSION"
    - git push --set-upstream -o merge_request.create origin "release-$PACKAGE_VERSION"

publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      when: manual
  script:
    - apt-get update
    - apt-get install -y zip
    - PACKAGE_VERSION=$(make version)
    - PACKAGE_NAME=factry-historian-datasource-${PACKAGE_VERSION:1}.zip
    - REPO_FILE=/var/opt/factry/download/packages.json
    - mkdir -p release/factry-historian-datasource
    - mv dist/ release/factry-historian-datasource
    - zip release/$PACKAGE_NAME release/factry-historian-datasource -r
    - scp release/$PACKAGE_NAME gitlab@$CLIENT_PORTAL_SERVER:/var/opt/factry/download/factry-historian-datasource
    - ssh gitlab@$CLIENT_PORTAL_SERVER "/var/opt/factry/publish-package -repo=$REPO_FILE -product=factry-historian-datasource -version=$PACKAGE_VERSION -os=any -arch=any -type=zip -location=factry-historian-datasource/$PACKAGE_NAME"
    - ssh gitlab@$CLIENT_PORTAL_SERVER 'cp -r /var/opt/factry/download '$CLIENT_PORTAL_DOWNLOAD_PATH''
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/release
      - $CI_PROJECT_DIR/dist
